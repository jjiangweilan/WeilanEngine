// Reference: https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
#version 450
#include "Common/Common.glsl"
#if G_VSM
#define VSM_SHADOW_MAP_SAMPLING_PASS
#include "Game/Shadow/VSM.glsl"
#endif
#define M_PI 3.1415926535897932384626433832795

#if CONFIG
name: Game/StandardPBR
features:
    - [G_PCF, G_VSM]
    - [_, G_DEFERRED]
#if G_DEFERRED
depth:
    testEnable: False
#endif
#endif

#define LOC_ShadowMapCS 5

#if VERT
#ifdef G_DEFERRED
layout(location = 0) out vec2 o_uv;

void main()
{
    vec4 c_Positions[6] = 
    {
        {-1,-1,0.5,1},
        {-1, 1,0.5,1},
        { 1, 1,0.5,1},

        {-1,-1,0.5,1},
        {1,  1,0.5,1},
        { 1,-1,0.5,1}
    };

    gl_Position = c_Positions[gl_VertexIndex];
    o_uv = gl_Position.xy * 0.5f + 0.5f;
}
#else
layout(location = 0) in vec3 i_Position;
layout(location = 1) in vec3 i_Normal;
layout(location = 2) in vec4 i_Tangent;
layout(location = 3) in vec2 i_UV;

layout(location = 0) out vec3 o_PositionWS;
layout(location = 1) out vec3 o_NormalWS;
layout(location = 2) out vec3 o_TangentWS;
layout(location = 3) out vec3 o_BitangentWS;
layout(location = 4) out vec2 o_UV;
layout(location = LOC_ShadowMapCS) out vec4 o_ShadowCS;
void main()
{
    o_PositionWS = vec3(pconst.model * vec4(i_Position, 1));
    o_NormalWS = (inverse(transpose(pconst.model)) * vec4(i_Normal, 1)).xyz;
    o_TangentWS = (inverse(transpose(pconst.model)) * vec4(i_Tangent.xyz, 1)).xyz;
    o_BitangentWS = i_Tangent.w * cross(o_NormalWS, o_TangentWS);
    o_UV = i_UV;

    o_ShadowCS = scene.worldToShadow * vec4(o_PositionWS, 1);

    gl_Position = scene.viewProjection * vec4(o_PositionWS, 1);
}
#endif
#endif

#if FRAG
#ifdef G_DEFERRED
layout(location = 0) in vec2 i_UV;
layout(set = 0, binding = 6) uniform sampler2D albedoTex;
layout(set = 0, binding = 7) uniform sampler2D normalTex;
layout(set = 0, binding = 8) uniform sampler2D maskTex;
layout(set = 0, binding = 9) uniform sampler2D depthTex;
#else
#define BaseColorTex baseColorTex_sampler_linear
#define NormalMap normalMap_sampler_linear
#define EmissiveMap emissiveMap_sampler_linear
#define MetallicRoughnessMap metallicRoughnessMap_sampler_linear

layout(location = 0) in vec3 i_PositionWS;
layout(location = 1) in vec3 i_NormalWS;
layout(location = 2) in vec3 i_TangentWS; // maybe look at MikkTSpace
layout(location = 3) in vec3 i_BitangentWS;
layout(location = 4) in vec2 i_UV;
layout(early_fragment_tests) in;
layout(location = LOC_ShadowMapCS) in vec4 i_ShadowCS;
layout(set = SET_MATERIAL, binding = 0) uniform PBR
{
    vec4 baseColorFactor;
    float roughness;
    float metallic;
} matParams;
layout(set = SET_MATERIAL, binding = 1) uniform sampler2D BaseColorTex;
layout(set = SET_MATERIAL, binding = 2) uniform sampler2D NormalMap;
layout(set = SET_MATERIAL, binding = 3) uniform sampler2D MetallicRoughnessMap;
layout(set = SET_MATERIAL, binding = 4) uniform sampler2D EmissiveMap;
layout(set = SET_MATERIAL, binding = 5) uniform sampler _sampler_point;
#define Roughness matParams.roughness
#define Metallic matParams.metallic
#endif

layout(location = 0) out vec4 o_Color;

#define NearZero 0.000001

float pow2(float x)
{
    return x * x;
}

const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 SphericalToUV(vec3 v)
{
    // -asin because we have top-left uv origin
    vec2 uv = vec2(atan(v.z, v.x), -asin(v.y));

    // convert to [0,1]
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

float Fresnel(float metallic, float dotVH)
{
    return metallic + (1 - metallic) * pow(2, (-5.55472 * dotVH - 6.98316) * dotVH);
}

float SpecularBRDF(vec3 l, vec3 v, vec3 n, float metallic, float roughness)
{
    vec3 h = normalize(l + v);
    float dotNH = max(dot(n,h), NearZero);
    float dotNV = max(dot(n,v), NearZero);
    float dotNL = max(dot(n,l), NearZero);
    float dotVH = max(dot(v,h), NearZero);
    float r2 = roughness * roughness;
    r2 *= r2;
// ndf
    float D = r2 / (M_PI * pow2(pow2(dotNH) * (r2 - 1) + 1));

// geometry
    float k = pow2(roughness + 1) / 8;
    float Gv = dotNV / (dotNV * (1 - k) + k);
    float Gl = dotNL / (dotNL * (1 - k) + k);
    float G = Gv * Gl;

// fresnel
    float F = Fresnel(metallic, dotVH);

    float brdf = (G * F * D) / (4 * dotNL * dotNV);
    return brdf;
}

void main()
{
#ifdef G_DEFERRED
    vec3 n = texture(normalTex, i_UV).xyz;
    vec4 mask = texture(maskTex, i_UV);
    float metallic = mask.x;
    float roughness = mask.y;
    vec3 baseColor = texture(albedoTex, i_UV).xyz;
    float depth = texture(depthTex, i_UV).x;
    vec4 positionWS = scene.invNDCToWorld * vec4(i_UV * 2 - 1, depth, 1.0);
    positionWS /= positionWS.w;
    vec3 v = normalize(scene.viewPos.xyz - positionWS.xyz);
#else
    vec3 n = normalize(i_NormalWS);
    vec2 metallicRoughness = vec2(Roughness, Metallic) * texture(MetallicRoughnessMap, i_UV).gb;
    float metallic = metallicRoughness.y;
    float roughness = max(metallicRoughness.x, 0.01);
    vec3 baseColor = texture(BaseColorTex, i_UV).xyz * matParams.baseColorFactor.xyz;
    vec3 v = normalize(scene.viewPos.xyz - i_PositionWS);
#endif

    vec3 color = vec3(0,0,0);
    for (int i = 0; i < scene.lightCount.x; ++i)
    {
        vec4 lightPos = scene.lights[i].position;
        vec3 l = lightPos.xyz;

        float dotNL = max(dot(n,l), NearZero);
        float brdf = SpecularBRDF(l, v, n, metallic, roughness);

        float light = dotNL * scene.lights[i].intensity;
        color += light * (baseColor / M_PI + brdf);
    }

    // shadow mask
    float shadowAttenuation = 1.0;
#ifdef G_DEFERRED
#else
    vec2 shadowUV = i_ShadowCS.xy / i_ShadowCS.w * 0.5 + 0.5;
    float objShadowDepth = i_ShadowCS.z / i_ShadowCS.w;
    if (shadowUV.x < 1 && shadowUV.y < 1 && shadowUV.x > 0 && shadowUV.y > 0)
    {
#ifdef G_VSM
        shadowAttenuation = VSMShadowAttenuation(shadowUV, objShadowDepth, 0.0001, 0.2);
#else
        shadowAttenuation = PcfShadow(shadowUV, objShadowDepth);
#endif
    }

#endif

    // diffuse cube light
    vec3 diffuseCubeColor = texture(diffuseCube, n).xyz;
    vec3 ambient = baseColor * diffuseCubeColor / M_PI;

    // vec3 emissive = texture(emissiveMap_sampler_linear, i_UV).xyz;

    o_Color = vec4(color + ambient, 1);

}
#endif


