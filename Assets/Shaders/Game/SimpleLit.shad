#version 460
#include "Common/Common.glsl"
#if G_VSM
#define VSM_SHADOW_MAP_SAMPLING_PASS
#include "Game/Shadow/VSM.glsl"
#endif

#if CONFIG
name: Game/SimpleLit
features:
    - [G_PCF, G_VSM]
    - [G_, G_SURFEL_BAKE]
#endif

struct v2f {
    vec3 positionWS;
    vec3 normalWS;
    vec4 shadowCoord;
    vec2 uv;
};

#if VERT
layout(location = 0) in vec3 iPosition;
layout(location = 1) in vec3 iNormal;
layout(location = 3) in vec2 iUV;

layout(location = 0) out v2f vOut;
void main()
{
    vec3 positionWS = vec3(pconst.model * vec4(iPosition, 1)).xyz;
    vOut.normalWS = (inverse(transpose(mat3(pconst.model))) * iNormal);
    vOut.shadowCoord = scene.worldToShadow * vec4(positionWS, 1.0);
    vOut.positionWS = positionWS.xyz;
    vOut.uv = iUV;
    gl_Position = scene.viewProjection * vec4(positionWS, 1);
}
#endif

#if FRAG

layout(set = SET_MATERIAL) uniform Unlit
{
    vec4 color;
    vec4 emission;
    float shadowBleedingClamp;
    float shadowMDClamp;
} vals;

layout(set = 0) uniform sampler2D fogTest;

layout(location = 0) in v2f fragInput;

layout(location = 0) out vec4 oColor;
#ifdef G_SURFEL_BAKE
layout(location = 1) out vec4 oNormal;
layout(location = 2) out vec4 oPosition;
#endif

void main()
{
#ifdef G_SURFEL_BAKE
    oColor = vec4(vals.color.xyz + vals.emission.xyz, 1.0f);
    oNormal = vec4(normalize(fragInput.normalWS.xyz), 1.0f);
    oPosition = vec4(fragInput.positionWS, 1.0f);
    return;
#else
    float c = scene.lightCount.x;
    vec3 color = vals.color.xyz;
    if (c > 0)
    {
        float ndotl = max(dot(normalize(fragInput.normalWS), scene.lights[0].position.xyz), 0);
        color *= ndotl * scene.lights[0].intensity;
        color = min(color, vec3(1));
    }

    // shadow mask
    vec2 shadowUV = fragInput.shadowCoord.xy / fragInput.shadowCoord.w * 0.5 + 0.5;
    float objShadowDepth = fragInput.shadowCoord.z;
    float shadowAttenuation = 1.0;
    if (shadowUV.x < 1 && shadowUV.y < 1 && shadowUV.x > 0 && shadowUV.y > 0)
    {
#ifdef G_VSM
        shadowAttenuation = VSMShadowAttenuation(shadowUV, objShadowDepth, vals.shadowBleedingClamp, vals.shadowMDClamp);
#else
        shadowAttenuation = PcfShadow(shadowUV, objShadowDepth);
#endif
    }

    oColor = vec4(vec3(color * shadowAttenuation) + vals.emission.xyz, 1.0);
#endif

    oColor = texture(fogTest, fragInput.uv);
}
#endif
