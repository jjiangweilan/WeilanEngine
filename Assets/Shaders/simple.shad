#version 460
#include "Common/Common.glsl"

#if CONFIG
name: simple
interleaved: False
depth:
    testEnable: True
    writeEnable : True
    compOp: lessOrEqual
#endif

#if VERT
layout(location = 0) in vec3 i_Position;
layout(location = 1) in vec3 i_Normal;

layout(location = 0) out vec4 v_Color;

out gl_PerVertex
{
    vec4 gl_Position;
};

void main()
{
    gl_Position = scene.viewProjection * pconst.model * vec4(i_Position, 1);
    v_Color = vec4((i_Normal + 1) / 2, 1);
}
#endif


#if FRAG
layout(location = 0) in vec4 v_Color;
layout(location = 0) out vec4 o_Color;

layout(set = SET_MATERIAL, binding = 0) uniform Colors
{
  vec4 color0;
  vec4 factor;
} colors;

layout(set = SET_MATERIAL, binding = 1) uniform Color1
{
  vec4 color;
} colors1;

layout(set = SET_MATERIAL, binding = 2) uniform sampler2D uTexture;

void main() {
  o_Color = v_Color * texture(uTexture, vec2(0.5, 0.5));
}

#endif
