ShaderPass GBuffer
{
// Reference: https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
#version 460
#include "Common/Common.glsl"
#include "Common/DeferredShading.glsl"

#if CONFIG
name: Editor/PrimitiveShape
#endif

#if VERT
layout(location = 0) in vec3 i_Position;
layout(location = 1) in vec3 i_Normal;
layout(location = 2) in vec4 i_Tangent;
layout(location = 3) in vec2 i_UV;

layout(location = 0) out vec3 o_PositionWS;
layout(location = 1) out vec3 o_NormalWS;
layout(location = 2) out vec3 o_TangentWS;
layout(location = 3) out vec3 o_BitangentWS;
layout(location = 4) out vec2 o_UV;
layout(location = 5) out vec3 o_PositionOS;
void main()
{
    o_PositionWS = vec3(pconst.model * vec4(i_Position, 1));
    o_NormalWS = (inverse(transpose(pconst.model)) * vec4(i_Normal, 1)).xyz;
    o_TangentWS = (inverse(transpose(pconst.model)) * vec4(i_Tangent.xyz, 1)).xyz;
    o_BitangentWS = i_Tangent.w * cross(o_NormalWS, o_TangentWS);
    o_UV = i_UV;
    o_PositionOS = i_Position;

    gl_Position = scene.viewProjection * vec4(o_PositionWS, 1);
}
#endif

#if FRAG
layout(location = 0) in vec3 i_PositionWS;
layout(location = 1) in vec3 i_NormalWS;
layout(location = 2) in vec3 i_TangentWS; // maybe look at MikkTSpace
layout(location = 3) in vec3 i_BitangentWS;
layout(location = 4) in vec2 i_UV;
layout(location = 5) in vec3 i_PositionOS;

layout(location = 0) out vec4 o_Lighting;
layout(location = 1) out vec4 o_Albedo;
layout(location = 2) out vec4 o_Normal;
layout(location = 3) out vec4 o_Property;

#include "Utils/Grid.glsl"

void main()
{
    vec3 scale = vec3(length(pconst.model[0].xyz), length(pconst.model[1].xyz), length(pconst.model[2].xyz));
    float grid = PristineGrid3D(i_PositionOS * scale, vec2(0.01f));
    vec4 baseColor = vec4(vec3(mix(0.5, 1.0, grid)), 1.0);

    vec3 normal = vec3(0,0,1);
    mat3 TBN = mat3(normalize(i_TangentWS), normalize(i_BitangentWS), normalize(i_NormalWS));
    vec3 n = EncodeGBufferNormal(normalize(TBN * normal));
    vec4 emission = vec4(0);

    o_Lighting = vec4(emission.xyz, 1.0f);
    o_Albedo = baseColor;
    o_Normal = vec4(n, 0);
    o_Property = vec4(0.01f, 1.0f, 1, 0);
}
#endif
}
