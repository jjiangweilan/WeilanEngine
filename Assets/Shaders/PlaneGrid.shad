#version 460
#include "Common/Common.glsl"

#if CONFIG
name : "PlaneGrid"
blend :
    - srcAlpha oneMinusSrcAlpha
#endif

#if VERT
layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec4 tangent;
layout(location = 3) in vec2 uv;

layout(location = 0) out vec4 worldPos;
void main()
{
    worldPos = pconst.model * vec4(position, 1.0f);
    gl_Position = scene.viewProjection * worldPos;
}
#endif

#if FRAG
layout(location = 0) in vec4 worldPos;
layout(location = 0) out vec4 oColor;
void main()
{
    const float PI = 3.14159265359;
    vec2 cosPos = cos(worldPos.xz * PI);
    vec2 minPos = min(dFdxFine(cosPos), dFdyFine(cosPos));
    float minVal = min(minPos.x, minPos.y);
    if (minVal < 0.00000000001)
        oColor = vec4(1.0);
    else
        discard;
    //vec3 fWorldPos = fract(worldPos.xyz);
    //vec3 downOrUp = round(fWorldPos);
    //vec3 delPos = floor(worldPos.xyz) + downOrUp;
    //vec3 dis = abs(delPos - worldPos.xyz);
    //const float gridWidth = 0.01;
    //vec3 grid = smoothstep(-gridWidth, gridWidth, -abs(dis) + gridWidth);
    //vec3 dfdx = dFdxFine(grid);
    //vec3 dfdy = dFdyFine(grid);
    //if (any(greaterThan(dfdx, vec3(0.1))) || any(greaterThan(dfdy, vec3(0.1))))
    //{
    //    oColor = vec4(1.0f);
    //}
    //else
    //    discard;
    // vec3 stepped = step(0.5, grid);
    // if (max(stepped.z, max(stepped.x, stepped.y)) == 0)
    // {
    //     discard;
    // }
    // oColor = vec4(step(0.5, grid), 1.0);
}
#endif
